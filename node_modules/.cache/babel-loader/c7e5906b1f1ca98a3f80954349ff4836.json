{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport const Si1Variant = {\n  name: 'Text',\n  fields: 'Vec<Si1Field>',\n  index: 'u8',\n  docs: 'Vec<Text>'\n};\nexport const v1 = {\n  Si1Field: {\n    name: 'Option<Text>',\n    type: 'Si1LookupTypeId',\n    typeName: 'Option<Text>',\n    docs: 'Vec<Text>'\n  },\n  Si1LookupTypeId: 'Compact<u32>',\n  Si1Path: 'Si0Path',\n  Si1Type: {\n    path: 'Si1Path',\n    params: 'Vec<Si1TypeParameter>',\n    def: 'Si1TypeDef',\n    docs: 'Vec<Text>'\n  },\n  Si1TypeDef: {\n    _enum: {\n      Composite: 'Si1TypeDefComposite',\n      Variant: 'Si1TypeDefVariant',\n      Sequence: 'Si1TypeDefSequence',\n      Array: 'Si1TypeDefArray',\n      Tuple: 'Si1TypeDefTuple',\n      Primitive: 'Si1TypeDefPrimitive',\n      Compact: 'Si1TypeDefCompact',\n      BitSequence: 'Si1TypeDefBitSequence',\n      // NOTE: This is specific to the implementation for pre-v14 metadata\n      // compatibility (always keep this as the last entry in the enum)\n      HistoricMetaCompat: 'Type'\n    }\n  },\n  Si1TypeDefArray: {\n    len: 'u32',\n    type: 'Si1LookupTypeId'\n  },\n  Si1TypeDefBitSequence: {\n    bitStoreType: 'Si1LookupTypeId',\n    bitOrderType: 'Si1LookupTypeId'\n  },\n  Si1TypeDefCompact: {\n    type: 'Si1LookupTypeId'\n  },\n  Si1TypeDefComposite: {\n    fields: 'Vec<Si1Field>'\n  },\n  Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',\n  Si1TypeDefSequence: {\n    type: 'Si1LookupTypeId'\n  },\n  Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',\n  Si1TypeParameter: {\n    name: 'Text',\n    type: 'Option<Si1LookupTypeId>'\n  },\n  Si1TypeDefVariant: {\n    variants: 'Vec<Si1Variant>'\n  },\n  Si1Variant\n};","map":{"version":3,"sources":["/Users/mario/p/dapp-test/node_modules/@polkadot/types/interfaces/scaleInfo/v1.js"],"names":["Si1Variant","name","fields","index","docs","v1","Si1Field","type","typeName","Si1LookupTypeId","Si1Path","Si1Type","path","params","def","Si1TypeDef","_enum","Composite","Variant","Sequence","Array","Tuple","Primitive","Compact","BitSequence","HistoricMetaCompat","Si1TypeDefArray","len","Si1TypeDefBitSequence","bitStoreType","bitOrderType","Si1TypeDefCompact","Si1TypeDefComposite","Si1TypeDefPrimitive","Si1TypeDefSequence","Si1TypeDefTuple","Si1TypeParameter","Si1TypeDefVariant","variants"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,UAAU,GAAG;AACxBC,EAAAA,IAAI,EAAE,MADkB;AAExBC,EAAAA,MAAM,EAAE,eAFgB;AAGxBC,EAAAA,KAAK,EAAE,IAHiB;AAIxBC,EAAAA,IAAI,EAAE;AAJkB,CAAnB;AAMP,OAAO,MAAMC,EAAE,GAAG;AAChBC,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAE,cADE;AAERM,IAAAA,IAAI,EAAE,iBAFE;AAGRC,IAAAA,QAAQ,EAAE,cAHF;AAIRJ,IAAAA,IAAI,EAAE;AAJE,GADM;AAOhBK,EAAAA,eAAe,EAAE,cAPD;AAQhBC,EAAAA,OAAO,EAAE,SARO;AAShBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,MAAM,EAAE,uBAFD;AAGPC,IAAAA,GAAG,EAAE,YAHE;AAIPV,IAAAA,IAAI,EAAE;AAJC,GATO;AAehBW,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,qBADN;AAELC,MAAAA,OAAO,EAAE,mBAFJ;AAGLC,MAAAA,QAAQ,EAAE,oBAHL;AAILC,MAAAA,KAAK,EAAE,iBAJF;AAKLC,MAAAA,KAAK,EAAE,iBALF;AAMLC,MAAAA,SAAS,EAAE,qBANN;AAOLC,MAAAA,OAAO,EAAE,mBAPJ;AAQLC,MAAAA,WAAW,EAAE,uBARR;AASL;AACA;AACAC,MAAAA,kBAAkB,EAAE;AAXf;AADG,GAfI;AA8BhBC,EAAAA,eAAe,EAAE;AACfC,IAAAA,GAAG,EAAE,KADU;AAEfpB,IAAAA,IAAI,EAAE;AAFS,GA9BD;AAkChBqB,EAAAA,qBAAqB,EAAE;AACrBC,IAAAA,YAAY,EAAE,iBADO;AAErBC,IAAAA,YAAY,EAAE;AAFO,GAlCP;AAsChBC,EAAAA,iBAAiB,EAAE;AACjBxB,IAAAA,IAAI,EAAE;AADW,GAtCH;AAyChByB,EAAAA,mBAAmB,EAAE;AACnB9B,IAAAA,MAAM,EAAE;AADW,GAzCL;AA4ChB+B,EAAAA,mBAAmB,EAAE,qBA5CL;AA6ChBC,EAAAA,kBAAkB,EAAE;AAClB3B,IAAAA,IAAI,EAAE;AADY,GA7CJ;AAgDhB4B,EAAAA,eAAe,EAAE,sBAhDD;AAiDhBC,EAAAA,gBAAgB,EAAE;AAChBnC,IAAAA,IAAI,EAAE,MADU;AAEhBM,IAAAA,IAAI,EAAE;AAFU,GAjDF;AAqDhB8B,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,QAAQ,EAAE;AADO,GArDH;AAwDhBtC,EAAAA;AAxDgB,CAAX","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport const Si1Variant = {\n  name: 'Text',\n  fields: 'Vec<Si1Field>',\n  index: 'u8',\n  docs: 'Vec<Text>'\n};\nexport const v1 = {\n  Si1Field: {\n    name: 'Option<Text>',\n    type: 'Si1LookupTypeId',\n    typeName: 'Option<Text>',\n    docs: 'Vec<Text>'\n  },\n  Si1LookupTypeId: 'Compact<u32>',\n  Si1Path: 'Si0Path',\n  Si1Type: {\n    path: 'Si1Path',\n    params: 'Vec<Si1TypeParameter>',\n    def: 'Si1TypeDef',\n    docs: 'Vec<Text>'\n  },\n  Si1TypeDef: {\n    _enum: {\n      Composite: 'Si1TypeDefComposite',\n      Variant: 'Si1TypeDefVariant',\n      Sequence: 'Si1TypeDefSequence',\n      Array: 'Si1TypeDefArray',\n      Tuple: 'Si1TypeDefTuple',\n      Primitive: 'Si1TypeDefPrimitive',\n      Compact: 'Si1TypeDefCompact',\n      BitSequence: 'Si1TypeDefBitSequence',\n      // NOTE: This is specific to the implementation for pre-v14 metadata\n      // compatibility (always keep this as the last entry in the enum)\n      HistoricMetaCompat: 'Type'\n    }\n  },\n  Si1TypeDefArray: {\n    len: 'u32',\n    type: 'Si1LookupTypeId'\n  },\n  Si1TypeDefBitSequence: {\n    bitStoreType: 'Si1LookupTypeId',\n    bitOrderType: 'Si1LookupTypeId'\n  },\n  Si1TypeDefCompact: {\n    type: 'Si1LookupTypeId'\n  },\n  Si1TypeDefComposite: {\n    fields: 'Vec<Si1Field>'\n  },\n  Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',\n  Si1TypeDefSequence: {\n    type: 'Si1LookupTypeId'\n  },\n  Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',\n  Si1TypeParameter: {\n    name: 'Text',\n    type: 'Option<Si1LookupTypeId>'\n  },\n  Si1TypeDefVariant: {\n    variants: 'Vec<Si1Variant>'\n  },\n  Si1Variant\n};"]},"metadata":{},"sourceType":"module"}