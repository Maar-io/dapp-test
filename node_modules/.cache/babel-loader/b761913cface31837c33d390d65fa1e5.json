{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of, switchMap } from 'rxjs';\nimport { createHeaderExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getHeader\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @returns An array containing the block header and the block author\n * @description Get a specific block header and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\n *\n * console.log(`block #${number} was authored by ${author}`);\n * ```\n */\n\nexport function getHeader(instanceId, api) {\n  return memo(instanceId, hash => api.queryAt(hash).pipe(switchMap(queryAt => combineLatest([api.rpc.chain.getHeader(hash), queryAt.session ? queryAt.session.validators() : of([])])), map(([header, validators]) => createHeaderExtended(header.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storeage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}","map":{"version":3,"sources":["/Users/mario/p/dapp-test/node_modules/@polkadot/api-derive/chain/getHeader.js"],"names":["catchError","combineLatest","map","of","switchMap","createHeaderExtended","memo","getHeader","instanceId","api","hash","queryAt","pipe","rpc","chain","session","validators","header","registry"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,GAApC,EAAyCC,EAAzC,EAA6CC,SAA7C,QAA8D,MAA9D;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAT,CAAmBC,UAAnB,EAA+BC,GAA/B,EAAoC;AACzC,SAAOH,IAAI,CAACE,UAAD,EAAaE,IAAI,IAAID,GAAG,CAACE,OAAJ,CAAYD,IAAZ,EAAkBE,IAAlB,CAAuBR,SAAS,CAACO,OAAO,IAAIV,aAAa,CAAC,CAACQ,GAAG,CAACI,GAAJ,CAAQC,KAAR,CAAcP,SAAd,CAAwBG,IAAxB,CAAD,EAAgCC,OAAO,CAACI,OAAR,GAAkBJ,OAAO,CAACI,OAAR,CAAgBC,UAAhB,EAAlB,GAAiDb,EAAE,CAAC,EAAD,CAAnF,CAAD,CAAzB,CAAhC,EAAsJD,GAAG,CAAC,CAAC,CAACe,MAAD,EAASD,UAAT,CAAD,KAA0BX,oBAAoB,CAACY,MAAM,CAACC,QAAR,EAAkBD,MAAlB,EAA0BD,UAA1B,CAA/C,CAAzJ,EAAgPhB,UAAU,CAAC,MAAM;AACjS;AACA;AACAG,EAAAA,EAAE,EAHwR,CAA1P,CAArB,CAAX;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of, switchMap } from 'rxjs';\nimport { createHeaderExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getHeader\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @returns An array containing the block header and the block author\n * @description Get a specific block header and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\n *\n * console.log(`block #${number} was authored by ${author}`);\n * ```\n */\n\nexport function getHeader(instanceId, api) {\n  return memo(instanceId, hash => api.queryAt(hash).pipe(switchMap(queryAt => combineLatest([api.rpc.chain.getHeader(hash), queryAt.session ? queryAt.session.validators() : of([])])), map(([header, validators]) => createHeaderExtended(header.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storeage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}"]},"metadata":{},"sourceType":"module"}