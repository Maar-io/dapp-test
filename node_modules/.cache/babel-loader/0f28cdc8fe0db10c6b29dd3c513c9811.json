{"ast":null,"code":"var _jsxFileName = \"/Users/mario/p/dapp-test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message, Segment, Image, Divider } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport Register from './Register';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  const [accountAddress] = useState(null);\n  const {\n    apiState,\n    keyring,\n    keyringState,\n    apiError\n  } = useSubstrate();\n  const accountPair = accountAddress && keyringState === 'READY' && keyring.getPair(accountAddress);\n\n  const loader = text => /*#__PURE__*/_jsxDEV(Dimmer, {\n    active: true,\n    children: /*#__PURE__*/_jsxDEV(Loader, {\n      size: \"small\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n\n  const message = err => /*#__PURE__*/_jsxDEV(Grid, {\n    centered: true,\n    columns: 2,\n    padded: true,\n    children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        negative: true,\n        compact: true,\n        floating: true,\n        header: \"Error Connecting to Substrate\",\n        content: `${JSON.stringify(err, null, 4)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n\n  if (apiState === 'ERROR') return message(apiError);else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = /*#__PURE__*/createRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"My/O6TtuLkiFkOfebXG1FZZWHaw=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(SubstrateContextProvider, {\n    children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/mario/p/dapp-test/src/App.js"],"names":["React","useState","createRef","Container","Dimmer","Loader","Grid","Sticky","Message","Segment","Image","Divider","SubstrateContextProvider","useSubstrate","Register","Main","accountAddress","apiState","keyring","keyringState","apiError","accountPair","getPair","loader","text","message","err","JSON","stringify","contextRef","App"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,IAApC,EAA0CC,MAA1C,EAAkDC,OAAlD,EAA2DC,OAA3D,EAAoEC,KAApE,EAA2EC,OAA3E,QAA0F,mBAA1F;AACA,OAAO,kCAAP;AACA,OAAO,WAAP;AACA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,iBAAvD;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAGA,SAASC,IAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,cAAD,IAAmBf,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM;AAAEgB,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,YAArB;AAAmCC,IAAAA;AAAnC,MAAgDP,YAAY,EAAlE;AACA,QAAMQ,WAAW,GACfL,cAAc,IACdG,YAAY,KAAK,OADjB,IAEAD,OAAO,CAACI,OAAR,CAAgBN,cAAhB,CAHF;;AAKA,QAAMO,MAAM,GAAGC,IAAI,iBACjB,QAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAA,gBAAsBA;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAKA,QAAMC,OAAO,GAAGC,GAAG,iBACjB,QAAC,IAAD;AAAM,IAAA,QAAQ,MAAd;AAAe,IAAA,OAAO,EAAE,CAAxB;AAA2B,IAAA,MAAM,MAAjC;AAAA,2BACE,QAAC,IAAD,CAAM,MAAN;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,QAAQ,MAAjB;AAAkB,QAAA,OAAO,MAAzB;AAA0B,QAAA,QAAQ,MAAlC;AACE,QAAA,MAAM,EAAC,+BADT;AAEE,QAAA,OAAO,EAAG,GAAEC,IAAI,CAACC,SAAL,CAAeF,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAA6B;AAF3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAUA,MAAIT,QAAQ,KAAK,OAAjB,EAA0B,OAAOQ,OAAO,CAACL,QAAD,CAAd,CAA1B,KACK,IAAIH,QAAQ,KAAK,OAAjB,EAA0B,OAAOM,MAAM,CAAC,yBAAD,CAAb;;AAE/B,MAAIJ,YAAY,KAAK,OAArB,EAA8B;AAC5B,WAAOI,MAAM,CAAC,iEAAD,CAAb;AACD;;AAED,QAAMM,UAAU,gBAAG3B,SAAS,EAA5B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,6BACE;AAAA,yCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA1CQa,I;UAE+CF,Y;;;KAF/CE,I;AA4CT,eAAe,SAASe,GAAT,GAAgB;AAC7B,sBACE,QAAC,wBAAD;AAAA,2BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;MANuBA,G","sourcesContent":["import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message, Segment, Image, Divider } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\n\nimport Register from './Register';\n\n\nfunction Main () {\n  const [accountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n      </header>\n      <Register/>\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}"]},"metadata":{},"sourceType":"module"}