{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of, switchMap } from 'rxjs';\nimport { createSignedBlockExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getBlock\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, block } = await api.derive.chain.getBlock('0x123...456');\n *\n * console.log(`block #${block.header.number} was authored by ${author}`);\n * ```\n */\n\nexport function getBlock(instanceId, api) {\n  return memo(instanceId, blockHash => api.queryAt(blockHash).pipe(switchMap(queryAt => combineLatest([api.rpc.chain.getBlock(blockHash), queryAt.system.events(), queryAt.session ? queryAt.session.validators() : of([])])), map(([signedBlock, events, validators]) => createSignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}","map":{"version":3,"sources":["/Users/mario/p/dapp-test/node_modules/@polkadot/api-derive/chain/getBlock.js"],"names":["catchError","combineLatest","map","of","switchMap","createSignedBlockExtended","memo","getBlock","instanceId","api","blockHash","queryAt","pipe","rpc","chain","system","events","session","validators","signedBlock","registry"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,GAApC,EAAyCC,EAAzC,EAA6CC,SAA7C,QAA8D,MAA9D;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,GAA9B,EAAmC;AACxC,SAAOH,IAAI,CAACE,UAAD,EAAaE,SAAS,IAAID,GAAG,CAACE,OAAJ,CAAYD,SAAZ,EAAuBE,IAAvB,CAA4BR,SAAS,CAACO,OAAO,IAAIV,aAAa,CAAC,CAACQ,GAAG,CAACI,GAAJ,CAAQC,KAAR,CAAcP,QAAd,CAAuBG,SAAvB,CAAD,EAAoCC,OAAO,CAACI,MAAR,CAAeC,MAAf,EAApC,EAA6DL,OAAO,CAACM,OAAR,GAAkBN,OAAO,CAACM,OAAR,CAAgBC,UAAhB,EAAlB,GAAiDf,EAAE,CAAC,EAAD,CAAhH,CAAD,CAAzB,CAArC,EAAwLD,GAAG,CAAC,CAAC,CAACiB,WAAD,EAAcH,MAAd,EAAsBE,UAAtB,CAAD,KAAuCb,yBAAyB,CAACI,GAAG,CAACW,QAAL,EAAeD,WAAf,EAA4BH,MAA5B,EAAoCE,UAApC,CAAjE,CAA3L,EAA8SlB,UAAU,CAAC,MAAM;AACpW;AACA;AACAG,EAAAA,EAAE,EAH2V,CAAxT,CAA1B,CAAX;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of, switchMap } from 'rxjs';\nimport { createSignedBlockExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getBlock\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, block } = await api.derive.chain.getBlock('0x123...456');\n *\n * console.log(`block #${block.header.number} was authored by ${author}`);\n * ```\n */\n\nexport function getBlock(instanceId, api) {\n  return memo(instanceId, blockHash => api.queryAt(blockHash).pipe(switchMap(queryAt => combineLatest([api.rpc.chain.getBlock(blockHash), queryAt.system.events(), queryAt.session ? queryAt.session.validators() : of([])])), map(([signedBlock, events, validators]) => createSignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}"]},"metadata":{},"sourceType":"module"}