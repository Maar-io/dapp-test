{"ast":null,"code":"var _jsxFileName = \"/Users/mario/p/dapp-test/src/Register.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main(props) {\n  _s();\n\n  const {\n    api\n  } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [blockCountdown, setBlockCountdown] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const blockPerEra = api.consts.dappsStaking.blockPerEra.toNumber();\n  const currentEra = api.query.dappsStaking.currentEra;\n  const bestNumber = api.derive.chain.bestNumber;\n  useEffect(() => {\n    let unsubscribeAll = null;\n    bestNumber(number => {\n      setProgress(number % blockPerEra / blockPerEra * 100);\n      setBlockCountdown(blockPerEra - number % blockPerEra);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n    api.query.dappsStaking.currentEra(e => {\n      setCurrentEra(e.toNumber());\n    }).catch(console.error);\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [currentEra, bestNumber]);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      color: \"purple\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Content, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Statistic, {\n          label: \"Current Era\",\n          value: era\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Content, {\n        extra: true,\n        children: [/*#__PURE__*/_jsxDEV(Progress, {\n          percent: progress,\n          indicating: true,\n          success: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), \"Blocks until new era :\", /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), \" \", blockCountdown]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"GKLhMX2hAy9qNILsOuYtTzF8jN8=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\nexport default function CurrentEra(props) {\n  _s2();\n\n  const {\n    api\n  } = useSubstrate();\n  return api.query.dappsStaking.currentEra ? /*#__PURE__*/_jsxDEV(Main, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this) : null;\n}\n\n_s2(CurrentEra, \"a5IVjGvlzdb5yuE5zCYn+JGZcoo=\", false, function () {\n  return [useSubstrate];\n});\n\n_c2 = CurrentEra;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"CurrentEra\");","map":{"version":3,"sources":["/Users/mario/p/dapp-test/src/Register.js"],"names":["React","useEffect","useState","Statistic","Grid","Card","Icon","Progress","useSubstrate","Main","props","api","era","setCurrentEra","blockCountdown","setBlockCountdown","progress","setProgress","blockPerEra","consts","dappsStaking","toNumber","currentEra","query","bestNumber","derive","chain","unsubscribeAll","number","then","unsub","catch","console","error","e","CurrentEra"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const { api } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [blockCountdown, setBlockCountdown] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const blockPerEra = api.consts.dappsStaking.blockPerEra.toNumber();\n  const currentEra = api.query.dappsStaking.currentEra;\n  const bestNumber = api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setProgress((number % blockPerEra) / blockPerEra * 100);\n      setBlockCountdown(blockPerEra - (number % blockPerEra));\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    api.query.dappsStaking.currentEra(e => {\n      setCurrentEra(e.toNumber());\n    }).catch(console.error);\n\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [currentEra, bestNumber]);\n\n  return (\n    <Grid.Column>\n      <Card color='purple'>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Era'\n            value={era}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Progress percent={progress} indicating success/>\n          Blocks until new era :\n          <Icon name='time' /> {blockCountdown}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function CurrentEra(props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking.currentEra\n    ? <Main {...props} />\n    : null;\n}\n"]},"metadata":{},"sourceType":"module"}