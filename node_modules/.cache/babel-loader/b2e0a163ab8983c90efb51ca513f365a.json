{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactAddLength, compactStripLength, isU8a } from '@polkadot/util';\nimport { Base } from \"./Base.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\n\nfunction decodeRaw(registry, Type, value) {\n  const Clazz = typeToConstructor(registry, Type);\n\n  if (isU8a(value)) {\n    const [, u8a] = compactStripLength(value);\n    return new Clazz(registry, u8a);\n  }\n\n  return new Clazz(registry, value);\n}\n\nexport class WrapperOpaque extends Base {\n  constructor(registry, Type, value) {\n    super(registry, decodeRaw(registry, Type, value));\n  }\n\n  static with(Type) {\n    return class extends WrapperOpaque {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `WrapperOpaque<${this._raw.toRawType()}>`;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  toU8a(isBare) {\n    const u8a = super.toU8a(isBare);\n    return isBare ? u8a : compactAddLength(u8a);\n  }\n  /**\n   * @description Return the inner value for the wrapped type\n   */\n\n\n  unwrap() {\n    return this._raw;\n  }\n\n}","map":{"version":3,"sources":["/Users/mario/p/dapp-test/node_modules/@polkadot/types/codec/WrapperOpaque.js"],"names":["compactAddLength","compactStripLength","isU8a","Base","typeToConstructor","decodeRaw","registry","Type","value","Clazz","u8a","WrapperOpaque","constructor","with","toRawType","_raw","toU8a","isBare","unwrap"],"mappings":"AAAA;AACA;AACA,SAASA,gBAAT,EAA2BC,kBAA3B,EAA+CC,KAA/C,QAA4D,gBAA5D;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0C;AACxC,QAAMC,KAAK,GAAGL,iBAAiB,CAACE,QAAD,EAAWC,IAAX,CAA/B;;AAEA,MAAIL,KAAK,CAACM,KAAD,CAAT,EAAkB;AAChB,UAAM,GAAGE,GAAH,IAAUT,kBAAkB,CAACO,KAAD,CAAlC;AACA,WAAO,IAAIC,KAAJ,CAAUH,QAAV,EAAoBI,GAApB,CAAP;AACD;;AAED,SAAO,IAAID,KAAJ,CAAUH,QAAV,EAAoBE,KAApB,CAAP;AACD;;AAED,OAAO,MAAMG,aAAN,SAA4BR,IAA5B,CAAiC;AACtCS,EAAAA,WAAW,CAACN,QAAD,EAAWC,IAAX,EAAiBC,KAAjB,EAAwB;AACjC,UAAMF,QAAN,EAAgBD,SAAS,CAACC,QAAD,EAAWC,IAAX,EAAiBC,KAAjB,CAAzB;AACD;;AAEU,SAAJK,IAAI,CAACN,IAAD,EAAO;AAChB,WAAO,cAAcI,aAAd,CAA4B;AACjCC,MAAAA,WAAW,CAACN,QAAD,EAAWE,KAAX,EAAkB;AAC3B,cAAMF,QAAN,EAAgBC,IAAhB,EAAsBC,KAAtB;AACD;;AAHgC,KAAnC;AAMD;AACD;AACF;AACA;;;AAGEM,EAAAA,SAAS,GAAG;AACV,WAAQ,iBAAgB,KAAKC,IAAL,CAAUD,SAAV,EAAsB,GAA9C;AACD;AACD;AACF;AACA;;;AAGEE,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,UAAMP,GAAG,GAAG,MAAMM,KAAN,CAAYC,MAAZ,CAAZ;AACA,WAAOA,MAAM,GAAGP,GAAH,GAASV,gBAAgB,CAACU,GAAD,CAAtC;AACD;AACD;AACF;AACA;;;AAGEQ,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKH,IAAZ;AACD;;AArCqC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactAddLength, compactStripLength, isU8a } from '@polkadot/util';\nimport { Base } from \"./Base.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\n\nfunction decodeRaw(registry, Type, value) {\n  const Clazz = typeToConstructor(registry, Type);\n\n  if (isU8a(value)) {\n    const [, u8a] = compactStripLength(value);\n    return new Clazz(registry, u8a);\n  }\n\n  return new Clazz(registry, value);\n}\n\nexport class WrapperOpaque extends Base {\n  constructor(registry, Type, value) {\n    super(registry, decodeRaw(registry, Type, value));\n  }\n\n  static with(Type) {\n    return class extends WrapperOpaque {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `WrapperOpaque<${this._raw.toRawType()}>`;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  toU8a(isBare) {\n    const u8a = super.toU8a(isBare);\n    return isBare ? u8a : compactAddLength(u8a);\n  }\n  /**\n   * @description Return the inner value for the wrapped type\n   */\n\n\n  unwrap() {\n    return this._raw;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}